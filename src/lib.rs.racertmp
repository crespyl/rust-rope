use std::rc::Rc;

const SPLIT_LEN: usize = 10;
const JOIN_LEN: usize = 5;
const REBALANCE_RATIO: f32 = 1.2;

enum RopeNode {
    Leaf(String),
    Node { len: usize, left: Rc<RopeNode>, right: Rc<RopeNode> },
}
impl RopeNode {    
    fn new_leaf(value: String) -> RopeNode {
        RopeNode::Leaf(value)
    }
    fn adjust(self) -> RopeNode {
        use RopeNode::*;

        let l = self.len();
        match self {
            Leaf(s) => {
                if l > SPLIT_LEN {
                    let split = l - SPLIT_LEN;
                    let left = s[0..split].to_string();
                    let right = s[split..].to_string();
                    Node { len: l,
                           left: Rc::new(RopeNode::new_leaf(left)),
                           right: Rc::new(RopeNode::new_leaf(right)) }
                } else {
                    Leaf(s)
                }
            },
            Node { len, left, right } => {
                if len < JOIN_LEN {
                    let mut s = String::with_capacity(len);
                    left.append_to(&mut s);
                    right.append_to(&mut s);
                    Leaf(s)
                } else {
                    Node { len: len, left: left, right: right }
                }
            },
        }
    }
    fn len(&self) -> usize {
        match *self {
            RopeNode::Leaf(ref s) => s.len(),
            RopeNode::Node{ len, .. } => len
        }
    }
    fn append_to(&self, buffer: &mut String) {
        match *self {
            RopeNode::Leaf(ref s) => {
                buffer.push_str(s);
            },
            RopeNode::Node { len, ref left, ref right } => {
                left.append_to(buffer);
                right.append_to(buffer);
            }
        }
    }
}

#[test]
fn it_works() {
    let rope = RopeNo
}
